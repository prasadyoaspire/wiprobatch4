Handon-1:

class Customer {
   private double walletBalance;
  
   //Define a parameterized constructor 
   //Define getters and setters

}
		    
class Fruits:
   private String fruitName;
   private double fruitPrice;
   private boolean isInStock;

  //Define a parameterized constructor
  //Define getters and setters
}

class InsufficientBalanceException extends Exception {  
   public InsufficientBalanceException(String message) {
     super(message);
   }
}

 class FruitOutOfStockException extends Exception {
    public FruitOutOfStockException(String message) {
       super(message);
    }
}
     

class FruitSeller {

  public String purchaseFruit(Fruits f, Customer c) throws FruitOutOfStockException, InsufficientBalanceException {

     //write your logic here
  }
   
}

Task:  

1. Throw FruitOutOfStockException when the fruit is out of stock with the message "Fruit out of stock".

2. Throw an InsufficientBalanceException when customer wallet balance is not sufficient (Item price is greater than the wallet balance) with the message "Insufficient balance, add money to the wallet!".

3. If no exception found return "Order Placed".

Sample :

Input:
	Customer c = new Customer("Rohit", 10000);
        Fruits f = new Fruits("Orange",300, true);
        FruitSeller fs = new FruitSeller();
        fs.purchaseFruit(f,c);
Output:
	Order placed   

===================================================================================================

Handon 2:

Method Name :	countChars
Method Description :	method that accepts a character array and count the number of times each character is present in the array.
Argument :	char[] arr
Return Type :	Map<Character, Integer>

sample input: 

           char[] chAry = {'a', 'p','p','l','d','a','a'}

smaple output 

               [a=3,p=2,l=1,d=1]

=======================================================================================================

Handson 3:

class Employee {  
   private String name
   private int salary
   // constructor with public visibility
   // Define getter setters with public visibility
   // override toString method
}

class Company {

  private ArrayList<Employee> empList;

  public ArrayList<Employee> sortByName(){
     //write your logic
  }
  ArrayList<String> sortOnTheBasisOfSalary() {
     //write your logic
  }
}

Tasks:

 sortByName() :  Write a code to get empList sorted in ascending order by name
                  return the new sorted list

 sortOnTheBasisOfSalary() : write a code to sort the name of employees based on the salary ( decreasing order of salary), put it into 			    a list and return the list

==============================================================================================


 